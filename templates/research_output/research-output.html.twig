{% import _self as formMacros %}
{% extends 'base.html.twig' %}

{% block title %}Hello ResearchOutputController!{% endblock %}

{% block body %}
<fieldset>
<legend><h3>General Infos</h3></legend>
{{form_start(formRO)}}
{{ form_row(formRO.title) }}
{{ form_row(formRO.type) }}
{{ form_row(formRO.identifier) }}
{{ form_row(formRO.description) }}
{{ form_row(formRO.standardUsed) }}
{{ form_row(formRO.reused) }}
{{ form_row(formRO.lineage) }}
{{ form_row(formRO.utility) }}
{{ form_row(formRO.issued) }}
{{ form_row(formRO.language) }}
{{ form_row(formRO.keyword) }}
{{ form_row(formRO.contacts) }}
{{ form_row(formRO.costs) }}
{{ form_row(formRO.vocabulary) }}
    <fieldset id="vocabField">

    <h3>Vocabulary</h3>
        <ul class="vocabulary"
            data-index="{{ formRO.vocabularyInfos|length > 0 ? formRO.vocabularyInfos|last.vars.vocabularyInfos + 1 : 0 }}"
            data-prototype="{{ form_widget(formRO.vocabularyInfos.vars.prototype)|e('html_attr') }}"    
        >
            {% for wp in formRO.vocabularyInfos %}
                <li>
                    {{ form_row(wp.vocabularyInfos.vars.prototype) }}
                </li>
            {% endfor %}
        </ul>
        <button type="button" class="add_item_linkVocab" data-collection-holder-class="vocabulary">
            Add a Vocabulary Info
        </button>
    </fieldset>
    <fieldset id="vocabField">



{# MACRO POUR DISTRIB + EMBARGO CACHÉ #}
{% macro printDistribEmbargo(wp) %}
    <fieldset>
    <legend><h3>Distribution general informations</h3></legend>
        {{ form_row(wp.access)}}
        {{ form_row(wp.accessUrl) }}
        {{ form_row(wp.accessProtocol) }}
        {{ form_row(wp.sizeValue) }}
        {{ form_row(wp.sizeUnit) }}
        {{ form_row(wp.format) }}
        {{ form_row(wp.downloadUrl) }}
    </fieldset>
    <fieldset>
    <legend><h3>Embargo</h3></legend>
        <h4>Provide embargo informations ONLY if there is an embargo on distribution. Ignore this otherwise.</h4>
        {{ form_row(wp.embargoStartDate) }}
        {{ form_row(wp.embargoEndDate) }}
        {{ form_row(wp.embargoLegalAndContractualReasons) }}
        {{ form_row(wp.embargoIntentionalRestrictions) }}
    </fieldset>

    <fieldset>
    <legend><h3>Licence</h3></legend>
        {{ form_row(wp.licenceName) }}
        {{ form_row(wp.licenceUrl) }}
    </fieldset>
    <fieldset>
    <legend><h3>Host</h3></legend>
        {{ form_row(wp.hostName) }}
        {{ form_row(wp.hostDescription) }}
        {{ form_row(wp.hostUrl) }}
        {{ form_row(wp.pidSystem) }}
        {{ form_row(wp.supportVersionning) }}
        {{ form_row(wp.certifiedWith) }}
    </fieldset>
   
{% endmacro %}
{# FIN MACRO #}
    <h3>Distributions</h3>
        <ul class="distribution"
            data-index="{{ formRO.distribution|length > 0 ? formRO.distribution|last.vars.distribution + 1 : 0 }}"
            data-prototype="{{ formMacros.printDistribEmbargo(formRO.distribution.vars.prototype)|e('html_attr') }}"    
        >
            {% for wp in formRO.distribution %}
                <li>
                    {{ formMacros.printDistribEmbargo(wp) }}
                </li>
            {% endfor %}
        </ul>
        <button type="button" class="add_item_linkDistrib" data-collection-holder-class="distribution">
            Add a Distribution
        </button>
    </fieldset>
    
</fieldset>

{# {{form_end(formRO)}} #}
<fieldset id="costField">
<legend><h3>Cost</h3></legend>
{{form_row(formRO.cost)}}
</fieldset>

<fieldset id="dataField">
<legend><h3>Data</h3></legend>
{{form_row(formRO.data)}}
</fieldset>

<fieldset id="serviceField">
<legend><h3>Service</h3></legend>
{{form_row(formRO.service)}}
</fieldset>

<fieldset id="metaDataField">
<legend><h3>Meta Data</h3></legend>
{{form_row(formRO.metadata)}}
</fieldset>
{# {{form_row(formRO.submit)}} #}
{{ form_end(formRO) }}


<style>
.cache {
    display: none;
}
li {
    padding: 10px;
    margin: 15px;
    border: solid black 2px;
}
</style>
<script>
    
// ----------------------------- Section : Afficher ou non le formulaire Cost
    var costField = document.getElementById("costField");
    costField.classList.add("cache");
    
     
    function startCost()
    {
      document.getElementById("research_output_costs").addEventListener("change", checkIfCost, false);
    }

    function checkIfCost()
    {
        var selectCost = document.getElementById("research_output_costs").value;
        if (selectCost == false && costField.classList.contains("cache"))
        {
            costField.classList.remove("cache");
        }
        else
        {
            costField.classList.add("cache");
            // Rajouter de quoi vider les inputs ? (Ou alors je gère dans le controlleur pour ne rien lier au RO)
        }
    }
// ----------------------------- Fin section

// ----------------------------- Section : Afficher ou non le formulaire Vocabulary
    var vocabField = document.getElementById("vocabField");
    {# vocabField.classList.add("cache");  #}
    function startVocab()
    {
      document.getElementById("research_output_vocabulary").addEventListener("change", checkIfVocab, false);
    }

    function checkIfVocab()
    {
        var selectVocab = document.getElementById("research_output_vocabulary").value;
        if (selectVocab == true && costField.classList.contains("cache"))
        {
            vocabField.classList.remove("cache");
        }
        else
        {
            vocabField.classList.add("cache");
        }
    }
// ----------------------------- Fin section


// ----------------------------- Section : Afficher Data ou Service
    var serviceForm = document.getElementById("serviceField");
    var dataForm = document.getElementById("dataField");
    serviceForm.classList.add("cache"); 
    function startDataOrService()
    {
      document.getElementById("research_output_type").addEventListener("change", checkIfDataOrService, false);
    }

    function checkIfDataOrService()
    {
        var roType = document.getElementById("research_output_type").value;
        if (roType == "dataSet") // Si Data
        {
            dataField.classList.remove("cache"); 
            serviceField.classList.add("cache");
        }
        else  // Si service
        {
            dataField.classList.add("cache"); 
            serviceField.classList.remove("cache");
        }
    }
// ----------------------------- Fin section 

{# // ----------------------------- Section : Afficher ou non embargo
    var embargoField = document.getElementById("embargoField");
    embargoField.classList.add("cache"); 
    function startEmbargo()
    {
      document.getElementById("distribution_access").addEventListener("change", checkIfEmbargo, false);
    }

    function checkIfEmbargo()
    {
        var selectEmbargo = document.getElementById("distribution_access").value;
        if (selectEmbargo == "embargo" && embargoField.classList.contains("cache"))
        {
            embargoField.classList.remove("cache");
        }
        else
        {
            embargoField.classList.add("cache");
            // Rajouter de quoi vider les inputs ? (Ou alors je gère dans le controlleur pour ne rien lier au RO)
        }
    } 
// ----------------------------- Fin section #}




window.addEventListener("load", startCost, false);
window.addEventListener("load", startDataOrService, false);
{# window.addEventListener("load", startEmbargo, false); #}
window.addEventListener("load", startVocab, false);

const addVocabToCollection = (e) => {
    const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);
        
    const item = document.createElement('li');
        
    item.innerHTML = collectionHolder
    .dataset
    .prototype
    .replace(/__name__/g,
    collectionHolder.dataset.index
    );
        
    collectionHolder.appendChild(item);

    collectionHolder.dataset.index++;

}
    //onClick
    document.querySelectorAll('.add_item_linkVocab').forEach(btn => {
        btn.addEventListener('click', addVocabToCollection)
});





const addDistribToCollection = (e) => {
   

    const collectionHolderDistrib = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);
     
    const item = document.createElement('li');
    
    item.innerHTML = collectionHolderDistrib
    .dataset
    .prototype
    .replace(/__name__/g,
    collectionHolderDistrib.dataset.index
    ); 
    collectionHolderDistrib.appendChild(item);

    collectionHolderDistrib.dataset.index++;
}
    //onClick
    document.querySelectorAll('.add_item_linkDistrib').forEach(btn => {
        btn.addEventListener('click', addDistribToCollection)
});
</script>
{% endblock %}
